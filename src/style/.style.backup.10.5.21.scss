// Font Imports
// JetBrains Mono, Roboto
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;700&family=Roboto&display=swap');
// Raleway, Source Sans Pro
@import url('https://fonts.googleapis.com/css2?family=Raleway:wght@400;700&family=Source+Sans+Pro:wght@400;700&display=swap');

// Here are a few to try on

// fonts
$mono-font: "JetBrains Mono";
$header-font: "BigolaDisplay-Regular";
// $main-font: "Roboto";
$main-font: "Raleway";


// some linked in font families, mostly saved for reference
$leco1976: "LECO1976-Regular";
$airo: "Airo-Medium";
$bigola: "BigolaDisplay-Regular";
$albula: "AlbulaPro-Bold";
$sublima: "Sublima-ExtraBold";

// colors
$blue-main: #0073ff;
$blue-main-darker: #003980;
$green-main: #bbff6e;
$green-main-dark: #8CBF52;
$green-main-darker: #2F401B;
$green-light: #e6ffb3;
$green-lighter: #edffe6;

$grey-light-lighter: #efefef;
$grey-light-mid: #dedede;
$grey-light-dark: #bcbcbc;

$grey-darker: #1d1f23;
$grey-darker-translucent: #1d1f23bb;
$grey-dark-mid: #21252b;
$grey-dark-lighter: #282c34;

$discord-color: #7289da;
$github-color: #24292e;
$darkmode-color: #ffcf2b;

// some generic colors
$red: #e06c75;
$blue: #61afef;
$green: #98c379;
$orange: #e5c07b;
$purple: #c577dc;
$white: #efefef;


$common-border-radius: 10px;
$common-transition: .4s background-color;
$dark-transition: .4s background-color, .4s color, .4s background;
$responsive-transition: .4s font-size;

// mixins
@mixin before-link-decoration {
  color: $blue;
  content: "\27BC";
  display: inline-block;
  margin-left: -1.25em;
  opacity: 0;
  transition: .2s opacity;
  width: 1.25em;
}

@mixin common-shadow {
  box-shadow: 0px 5px 15px $grey-darker-translucent;
}




// responsive variables
// calcs to account for scrollbar width when it isn't hidden
$content-wrapper-large-width: calc(45% - (100vw - 100%));
$content-wrapper-small-width: calc(65% - (100vw - 100%));
$content-wrapper-tablet-width: calc(75% - (100vw - 100%));
$content-wrapper-phone-width: calc(100% - (100vw - 100%));
$header-large-width: calc(20% - (100vw - 100%));
$header-image-width: calc(50% - (100vw - 100%));
$full-page-width: calc(100% - (100vh - 100%));

* {
  margin-top: 0;
}

html {
  // this accounts for scrollbars adding width when they pop in
  //margin-left: calc(100vw - 100%);
  // overflow-y: scroll;
}

// setup font variants
h1, h2, h3, h4, h5, h6 {
  font-feature-settings: 'ss07';
}

// main body and dark/light mode stuff
body {
  color: $white;
  font-family: $main-font;
  margin: 0;
  min-height: 100vh;
  opacity: 1;
  overflow-x: hidden;
  padding: 0;
  width: 100vw; // this works in tandem with overflow-x: hidden to counter scrollbar jump

  // DARK MODE STYLES
  &.dark-mode {
    background-color: $grey-dark-mid;

    h1, h2, h3, h4, h5, h6 {
      color: $blue;
    }
    

    // todo: input hover effects?
    input {
      background-color: $grey-dark-lighter;
      color: $grey-light-lighter;
    }

    label {
      color: $blue;
      font-weight: bold;
    }

    div#content-wrapper {
      background-color: $grey-dark-mid;
    }

    div#page-body-wrapper {
      color: $grey-light-lighter;
    }

    p {
      color: $grey-light-lighter;
    }

  }
}


// ==================
//    HEADER STUFF
// ==================

header {
  /*
    The position and top properties work in tandem to make this element
    scroll with the page. I use the internal wrapper div to still have 
    the benefit of the flexbox behavior for aligning the child content.
  */

  align-self: flex-start;
  background-color: $grey-dark-mid;
  box-shadow: 0px 0px 50px $grey-dark-mid;
  font-size: 1.1em;
  height: auto;
  //max-width: 15em;
  position: sticky;
  top: 0;
  //width: $header-large-width;
  z-index: 1;

  div.header-wrapper {
    align-items: center;
    display: flex;
    flex-direction: column;
    //height: 80vh;
    justify-content: center;
    margin: 0;
    padding: 0;
    top: 0;
    z-index: 800;
  }

  h1 {
    

    // TODO: which varation is the best? Is this one too noisey?
    //background-color: $grey-dark-lighter;
    border-radius: 100px;
    display: inline-block;
    font-feature-settings: 'ss01';
    line-height: .80em;
    margin: 0;
    margin-top: 1.1em;
    min-height: 2.0em;
    min-width: 10%;
    padding: 1.0em 0.5em;
    padding-top: .75em;
    text-shadow: 0px 5px 15px $grey-darker-translucent;
    //;

    // TODO: Is this nauseating or cool?
    //transform: skew(.49turn, -10deg);
    transition: transform 5000ms;

    // too subtle or cool? Better on skewed text?
    /*
    text-shadow:  1px 1px 0px $grey-darker,
                  3px 3px 0px $grey-darker,
                  2px 2px 0px $grey-dark-lighter;
                  */

    &:hover {
      // transform: skew(.46turn, -10deg);
    }

    span.bigola-07 {
      font-feature-settings: 'ss07';
    }
  }

  img {
    border-radius: 100%;
    margin-top: 1.0em;
    transition: all 250ms;

    &:hover {
      transform: scale(1.05) rotate(-1deg);
    }
  }
}

nav.main-nav {
  // I don't like the positioning here as much, but I need the 
  // padding hover transition on the nav ul li's to not adjust the
  // overall width and ruin the centering.
  align-self: baseline;
  padding-left: 3em;

  ul {
    font-weight: bold;
    line-height: 2em;
    list-style: none;
    width: 66%;
  }

  li {
    display: inline;
    margin-bottom: 2em;
    margin-right: 1.5em;

    a {
      background-color: transparent;
      border-left: .2em solid transparent;
      border-radius: $common-border-radius;
      color: $white;
      display: inline-block;
      margin: -.5em;
      overflow-x: visible;
      padding: .75em;
      //padding-left: 1.5em;
      text-decoration: none;
      // transition: .5s background-color, .2s border-left;
      transition: all 300ms;
      z-index: 1;

      &:before {
        @include before-link-decoration();
      }

      &:hover:before, &.active:before {
        opacity: 1;
      }

      &.active {
        @include common-shadow();
        background-color: $grey-dark-lighter;
      }

      /*
      &:hover, &.active {
        padding-left: 1.5em;
      } 
      */
    }
  }
}

//  ===========================
//     CONTENT WRAPPER STUFF
//  ===========================




div#page-wrapper {
  align-items: center;
  border-radius: $common-border-radius;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-evenly;
  min-height: 92vh;
  overflow: visible;
  transition: .4s opacity;
  width: 100%;
}


// input Stuff
button:not(.glide__bullet) {
  border: 0;
  border-radius: $common-border-radius;
  color: $blue;
  cursor: pointer;
  font-family: $main-font;
  font-size: 1.2em;
  font-weight: bold;
  padding: .5em 1em;
  transition: .15s transform, .15s background-color, .15s filter;

  &:hover {
    filter: brightness(1.05);
    transform: scale(1.01);
  }

  &:active {
    filter: brightness(.95);
    transform: scale(.99);
  }
}

input {
  border: 0;
  border-radius: $common-border-radius;
  font-family: $main-font;
  font-size: 1.2em;
  outline: none;
  padding: .5em 1em;
}

label {
  font-weight: bold;
}

input:disabled, label.disabled {
  opacity: 30%;
}

h1, h2, h3, h4, h5, h6 {
  font-family: $header-font;
  font-weight: bold;
}

// hide number input spinners
input::-webkit-inner-spin-button,
input::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type=number] {
  -moz-appearance: textfield;
}

input#row-limit {
  width: 3em;
  text-align: right;
}


// main content - TODO: Rewrite this to use the media queries
div.content-wrapper {
  font-size: 1.2em;
  margin-bottom: 3em;
  margin-top: 2em; // TODO: reaaaaally rethink this approach
  overflow: hidden;
  //padding: 3em;
  transition: $dark-transition;
  width: $content-wrapper-large-width;
  z-index: 100;

  div {
    flex: 0 0 25%;
  }
}

// =============================
//    VARIOUS COMPONENT STUFF   
// =============================

// main page stylings
div.content-wrapper {
  ul {
    list-style-type: none;
    line-height: 1.8em;


    // need to be direct children to not affect <li>s in <ol> children
    & > li::before {
      color: $blue;
      //content: "\204D";
      // content: "\2023";
      // content: "\2023";
      content: "\2724";
      display: inline-block;
      font-size: .8em;
      margin-left: -1.5em;
      width: 1.5em;
    }
  }

  ol {
    // this handles custom number styling
    list-style: none;
    counter-reset: list-counter;

    & > li {
      counter-increment: list-counter;
    }

    & > li::before {
      content: counter(list-counter) ". ";
      color: $blue;
      font-weight: bold;
      font-family: $header-font;
      font-size: 1.1em;
    }
  }

  p, ul, pre {
    line-height: 1.6em;
    margin-bottom: 2em;
  }

  & p > code, li > code {
    background-color: $grey-dark-lighter;
    border-radius: $common-border-radius;
    color: $blue;
    padding: .25em;
  }

  pre {
    background-color: $grey-dark-lighter;
    border-radius: $common-border-radius;
    font-size: .8em;
    padding: 1.5em;
  }

  li:not(:last-child) {
    margin-bottom: .5em;
  }
}

img[alt] {
  color: $blue;
  font-family: "JetBrains Mono";
  font-size: 1.0rem;
  text-align: center;
}

span.pretty-date {
  background-color: $grey-dark-mid;
  border-radius: $common-border-radius;
  font-size: 1.0rem;
  font-weight: bold;
  padding: .5em;
  margin: -.5em;

  & span.pretty-date-value {
    color: $blue;
  }
}


// ==========================
//    BLOG COMPONENT STUFF
// ==========================

$blog-title-size: 2.4rem; 

div.post-stub > a {
  color: inherit;
  text-decoration: none;
}

div.post-stub {
    div.blog-post {
    transition: background-color 150ms;

    &:active, &:hover {
      background-color: $grey-dark-lighter;
    }
  }

  &:before {
    @include before-link-decoration();
    font-size: $blog-title-size;
    padding-top: 1.8rem;
    position: absolute;
  }

  &:hover:before {
    opacity: 1;
  }
}

div.blog-post {
  background-color: $grey-dark-mid;
  border-radius: $common-border-radius;
  margin-bottom: 1rem;
  // this transition property eats the CSSTransitions for full Posts
  //transition: background-color 400ms;
  padding: 1.6rem;

  &.selected-post > post-content {
    background-color: $grey-dark-lighter;
  }

  h1 {
    display: inline-block;
    font-family: $header-font;
    font-size: $blog-title-size;
    margin-bottom: .5rem;
  }

  div.post-meta {
    margin-bottom: 1.5rem;

    // prevent PostStubs from having more margin than necessary
    &:only-child {
      margin-bottom: .5rem;
    }

    a {
      text-decoration: none;
    }

    h1 { 
      font-size: 3.0rem;
    }
  }

  div.post-body {
    font-size: 1.2rem;
  }
}

button.blog-post-back {
  background-color: $grey-dark-lighter;
  box-shadow: none;
  color: $blue;
  margin-bottom: 1rem;
  transform: scaleX(-1);

  &:hover {
    transform: scaleX(-1);
  }
}

// ===============================
//    PORTFOLIO COMPONENT STUFF
// ===============================

div.portfolio {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  overflow: hidden;
  padding-top: 1em;
  //padding: 2em;


  h1 {
    margin: 0;
    z-index: 1;
  }

  div.project-card {
    border-radius: $common-border-radius;
    display: flex;
    margin-bottom: 1em;
    overflow-y: hidden;
    padding: 1em;
    transition: all 400ms;

    div.project-card-image-wrapper {
      background-color: $grey-dark-lighter;
      border-radius: $common-border-radius;
      overflow: hidden;
      margin-right: 1em;      
      max-width: 128px;

      img {
        height: auto;
        width: 128px;
      }
    }

    div.project-card-content {
      flex: 1 !important;
      margin-right: 1em;

      h1 {
        font-size: 3.0em;
      }
    }

    div.project-card-meta {

      span.pretty-date {
        background-color: $grey-dark-lighter;
        margin-bottom: 1.5em;
      }

      div.project-card-meta-techs {
        margin: 1em 0 1em -.5em;
      }
    }

    &:hover {
      background-color: $grey-dark-lighter;
      cursor: pointer;
    }

    &.project-card-hidden {
      //display: none;
      filter: blur(5px);
      height: 0;
      opacity: .1;
      position: relative;
    }
  }


  span.project-meta-tech, span.project-tech-filter {
    // border: 2px solid $blue;
    background-color: $grey-dark-lighter;
    border-radius: $common-border-radius;
    color: $blue;
    font-size: .8em;
    font-weight: bold;
    margin-right: .5em;
    padding: .5em;
    transition: all 200ms; // TODO: make "all 300ms" a variable so I can modify time universally
  
    &.selected {
      background-color: $blue;
      //color: $grey-light-lighter;
      color: $grey-dark-lighter;
    }
  }

  div.project-filters {
    margin-bottom: 1em;
  }
  span.project-tech-filter {
    cursor: pointer;
    font-size: 1.2em;
  }

  /*
    Alright, this is a damn mess.

    I need to figure out a proper approach to layering these elements
    as well as controlling which are affected by the hover.

    I should really dig into what this dude is doing here: 
    http://www.mypoorbrain.com/

    He seems to have a similar thing sorted out.

    Also - I want whatever flex settings gets the cards to fill in 
    like this, so that the final, unfilled row has an empty space 
    where the cards are missing rather than having the cards that
    are there fill in the entire thing.

    Should I also have these card sizes absolute? Like, they're always
    going to be 256px wide, but the width of the screen determines how
    many are going to be seen. 

    I think it's reasonable to assume a viewport is never going to be 
    smaller in width than 256px.
  */

  /*
  div.project-card {
    align-items: center;
    background-color: $grey-dark-lighter;
    border-radius: $common-border-radius;
    display: flex;
    justify-content: center;
    transition: all 400ms;

    // this should probably be responsive
    height: 256px;
    width: 256px;

    // first approach
    img.project-background {
      height: 10%;
      width: 10%;

      position: absolute;
    }

    // second approach
    div.project-background {
      height: 100%;
      position: relative;
      width: 100%;

      //z-index: -1;

      // hover effects for background
      .project-background-hover {
        filter: blur(10px);
      }
    }

    // third approach
    &::before {
      background-position: 100px 100px;
      content: '';
      position: absolute;
      top: 0;
      left: 0;

      &:hover {
        filter: blur(10px);
      }
    }

    div.project-meta {
      display: none;
    }

    &:hover {
      cursor: pointer;
      transform: scale(1.02);
    }
  }
  */

}


//  ======================
//     TRANSITION STUFF
//  ======================

// this transition stuff is kind of a rat's nest of code. Not a fan of how I have 
// this organized.

// page transitions
.page-enter, .page-appear, 
.post-enter, .post-appear 
//.project-card-enter, .project-card-appear  
{
  // filter: blur(20px);
  // filter: blur(8px);
  opacity: 0;
  transform: translateX(150px);
}

.page-enter, .page-appear {
  position: fixed;

  // this is overridden in the responsive media queries at the end
  width: $content-wrapper-phone-width;
}

.page-enter-active, .page-appear-active, .post-enter-active, .post-appear-active {
  // filter: blur(0);
  opacity: 1;
  transform: translateX(0);
  // transition: opacity 400ms, transform 400ms;
  transition: all 300ms;
}

.page-enter-done, .page-appear-done, .page-exit,
.post-enter-done, .post-appear-done, .post-exit {
  opacity: 1;
  // this is necessary to avoid the jump when "transform: none" is applied
  transform: translateX(0);
}

.page-exit, .post-exit {
  position: fixed;
}

.page-exit {
  width: $content-wrapper-phone-width; // overridden to proper size via media queries
}

.page-exit-done, .post-exit-done {
  // filter: blur(5px);
  opacity: 0;
  // this softens the transform and prevents blur from clipping at element bounds 
  padding-left: 2em;  
  position: fixed;
  transform: translateX(-50px);
}

.page-exit-active, .post-exit-active {
  // filter: blur(5px);
  opacity: 0;
  padding-left: 2em;
  position: fixed;
  transform: translateX(-50px);
  transition: all 300ms;
}

// Project-card Transitions

div.portfolio {
  div.project-card {
    &.project-card-enter, &.project-card-appear {
      filter: blur(5px);
      flex: none;
      height: 0;
      opacity: 0;
      //position: fixed;
      transform: scale(.96);
    }

    &.project-card-enter-active, &.project-card-appear-active {
      flex: none;
      height: auto;
      transition: all 1000ms;
    }

    &.project-card-enter-done, &.project-card-appear-done {
      flex: auto;
      height: auto;
      opacity: 1;
      transform: scale(1);
      //transform: scaleY(1);
    }

    &.project-card-exit {
      flex: none;
      height: auto;
    }

    &.project-card-exit-active {
      filter: blur(10px);
      flex: none;
      height: 0;
      //opacity: 0;
      transform: scale(.96);
    }

    &.project-card-exit-done {
      flex: none;
      height: 0;
    }
  }
}


// footer stuff
footer {
  align-items: center;
  //background-color: $grey-darker;
  display: flex;
  font-family: $main-font;
  font-weight: bold;
  justify-content: center;
  margin-top: auto;
  text-align: center;
  height: 20vh;
  width: 100%;

  p.footer-text {
    color: $blue;
  }
}

// demo stuff
.demo-controls {
  //text-align: right;
  align-items: center;
  display: flex;
  justify-content: flex-end;

  & label {
    margin-left: 2em;
  }

  & input { 
    margin-left: 1em;
  }

  & label:first-child {
    margin-left: 0;
    flex-grow: 5;
  }
}

.demo-add form, .demo-search form {

  display: flex;
  justify-content: space-between;
  width: 100%;

  p:first-child {
    width: 80%;
  }

  /*
    I had these differ for a focus-effect but I'm not sure that 
    I like it as much as I thought I would.
  */
  & input {
    border: 2px solid $grey-dark-mid;
    transition: .2s width, .2s border;
    width: 50%;

    &.input-error, &.input-error:focus {
      border: 2px solid $red;
    }
  }

  & input:focus {
    border: 2px solid $blue;
    width: 50%;
  }
}


table {
  background-color: $grey-dark-lighter;
  border-radius: $common-border-radius;
  border-spacing: 0;
  padding: 1.0em 0;
  table-layout: fixed;
  width: 100%;

  tr {
    transition: .2s opacity;
  }

  tr.removing {
    opacity: 0;
  }  

  th, td {
    border: 0;
    width: 40%;
  }

  th {
    text-align: left;
  }

  th, td:first-child {
    color: $blue;
  }

  td:first-child:not(.no-restricted-width), 
  th:first-child:not(.no-restricted-width),
  td:last-child, 
  th:last-child {
    font-weight: bold;
    text-align: center;
    width: 1%;
    white-space: nowrap;
  }

  th, td {
    padding: .5em;
  }

  tbody tr:hover {
    background-color: $grey-dark-mid;
    cursor: pointer;
  }

  span.demo-list-order:hover, span.demo-list-order.order-by {
    border-bottom: 1px solid $blue;
    cursor: pointer;
    //text-decoration: underline;
  }

  td.demo-list-entry-delete {
    color: $red;
    transition: .1s background-color;

    &:hover {
      background-color: $red;
      color: $white;
      text-shadow: 2px 2px 0px $grey-dark-lighter;
    }
  }
}

// react-transition-group stuff
.demo-entry-enter, .demo-entry-exit-done, .demo-entry-appear {
  opacity: 0;
}

.demo-entry-enter-active, .demo-entry-appear-active {
  opacity: 1;
  transition: opacity 400ms;
}

.demo-entry-enter-done, .demo-entry-appear-done, .demo-entry-exit {
  opacity: 1;
}

.demo-entry-exit-active {
  opacity: 0;
  transition: opacity 400ms;
}

// Todo: fully integrate the demo stylings into the final design
span.demo-search-highlight, span.search-highlight {
  color: $orange;
  font-weight: bold;
}

// =======================
//    ANIMATION CLASSES
// =======================

.rotate {
  animation: rotation 32s infinite linear;
}

.loading-rotate {
  // maybe an ease-in type thing instead of linear?
  animation: rotation 6s infinite linear;
}

@keyframes rotation {
  from {
    transform: rotate(0deg);
  }
  to { 
    transform: rotate(359deg);
  }
}

// =======================
//    ADMIN PANEL STUFF
// =======================

@mixin form-theme($color) {
  h1, h2, h3, h4, h5, h6, label {
    color: $color;
  }

  button, span.post-category, span.project-technology, span.editor-tag {
    background-color: $grey-dark-lighter;
    border-radius: $common-border-radius;
    color: $color;
    font-weight: bold;
    padding: .5em 1em;
    margin-right: .5em;

    a {
      color: $color;
    }
  }

  button:hover:enabled {
    border: 2px solid $color;
    filter: brightness(1.2);
  }

  input, .ace_editor {
    border: 2px solid transparent;
    transition: border 200ms, filter 200ms;

    &:hover {
      //cursor: pointer;
      filter: brightness(1.2);
    }
  }

  input:focus, .ace_focus {
    border: 2px solid $color;
  }

  .admin-editor-checkbox-wrapper > 
  .admin-editor-checkbox:checked + .admin-editor-styled-checkbox,
  .admin-editor-tooltip > .admin-editor-tooltip-text {
    background: $color;
  }

  .admin-editor-checkbox-wrapper:hover > .admin-editor-styled-checkbox {
    border: 2px solid $color;
  }

  .admin-editor-table tr th, table td:first-child:not(.no-color), .data-length {
    color: $color;
  }

  .admin-editor-table tr:hover {
    border-left: 4px solid $color;
  }
}

.centered-content-with-icon {
  align-items: center;
  display: flex;
  //justify-content: space-between;

  &.admin-editor-button {
    display: inline-flex;
  }

  svg {
    margin-right: .5em;
  }
}

.admin-editor-button {
  &:disabled {
    cursor: default;
    opacity: 30%;

    &:hover {
      border: 2px solid transparent;
    }
  }
}

.editor-tag, .editor-tag a {
  align-items: center;
  display: inline-flex;

  svg {
    margin-left: .5em;
  }
}

table th.no-color, table td.no-color:first-child { 
  color: $white;
}

div.admin-panel {
  display: flex;
  flex-direction: row;
  width: 100vw;

  h1, h2, h3, h4, h5 {
    font-family: $mono-font;
  }

  div.admin-panel-sidebar {
    background-color: $grey-darker;
    font-size: 1.2em;
    //margin-right: 2em;
    min-height: 100vh;
    min-width: 10em;

    h1 {
      font-size: 1.5em;

      &.centered-content-with-icon svg {
        font-size: 2.2em;
        margin-right: .25em;
      }
    }

    div.admin-panel-sidebar-content-wrapper {
      margin: 1.5em;
      position: fixed;
      max-width: 8em;


      a {
        text-decoration: none;
      }
    }

    a {
      color: $blue;

      &.sidebar-link {
        //background-color: $grey-dark-mid;
        border-radius: $common-border-radius;
        font-weight: bold;
        padding: .5em 1em;
        text-decoration: none;
        transition: background 250ms;
        //width: 100%;

        &:hover, &.sidebar-link-active {
          // background-color: $grey-dark-lighter;
          background-color: $grey-dark-mid;
        }
      }

      &.pages-link {
        color: $red;
      }

      &.posts-link {
        color: $green;
      }

      &.sidebar-exit-link {
        color: $orange;
      }
    }

    ul {
      list-style-type: none;
      padding: 1em;
      
      li {
        margin-bottom: .5em;
        margin-left: -1.0em;
        margin-right: -3em;
      }
    }
  }

  div.admin-panel-content-wrapper {
    padding: 2em;
    width: 100%;

    // TODO: Remove the double style definitions - admin-*-form should be redundant
    div.admin-page-form, div.admin-panel-pages {
      @include form-theme($red);
    }

    div.admin-post-form, div.admin-panel-posts {
      @include form-theme($green);
    }

    div.admin-project-form, div.admin-panel-projects {
      @include form-theme($blue);
    }

    form {
      input {
        min-width: 24em;
      }
    }
  }

  label {
    font-size: 1.2em;
    margin-left: 1.0em;

    &.admin-editor-label {
      margin-left: 0em;

      svg {
        margin-left: .5em;
      }
    }

    &.admin-editor-checkbox-wrapper {
      margin-left: 0em;
    }
  }

  button {
    border: 2px solid transparent;
    color: $grey-dark-mid;
    transition: all 200ms;

    &:hover, &:active {
      transform: none;
    }
  }

  input {
    font-family: $mono-font;
  }


  // set border radius for AceEditor components
  div#page-body, div#post-body, div#project-description {
    border-radius: $common-border-radius;
    width: 100%;
  }
}

.admin-editor-tooltip {
  /*
    TODO: Hovering over where the tooltip will eventually be shouldn't
    cause the tooltip to appea.r
  */
  cursor: help;
  position: relative;
  text-decoration: dotted;

  .admin-editor-tooltip-text {
    background: $white;
    border-radius: $common-border-radius;
    box-shadow: 1px 1px 0px $grey-darker;
    bottom: 100%;
    display: inline;
    color: $grey-dark-mid;
    font-size: .4em;
    left: -15%;
    max-width: 100%;
    opacity: 0%;
    padding: .5em 1em;
    position: absolute;
    transition: all 150ms;
    text-align: center;
    visibility: visible;
    white-space: normal !important;
    z-index: 1;
  }

  &:hover .admin-editor-tooltip-text {
    opacity: 100%;
    visibility: visible;
  }
}

table.admin-editor-table {
  font-size: 1.2em;

  th.centered-cell, td.centered-cell {
    display: inline-flex;
    justify-content: center;
    text-align: center;
    // width: max-content;
  }

  label.admin-editor-checkbox-wrapper {
    margin: 0 auto;
    width: max-content;
  }

  .admin-editor-checkbox-wrapper .admin-editor-styled-checkbox {
    background: $grey-dark-mid;
    
    svg {
      color: $grey-dark-mid;
    }
  }

  tbody tr:hover {
    background: $grey-darker;
  }
  
  tr td:first-child, tr th:first-child {
    max-width: max-content;
    padding-left: 1.5em;
    text-align: left;
  }

  tr {
    border-left: 4px solid transparent;
  }

  .admin-editor-table-small-cell, .centered-cell {
    // this is kind of gross
    //max-width: 24px;
    width: 5%;
  }
}

.admin-editor-checkbox-wrapper {
  align-items: center;
  display: flex;
  margin-left: 0;
  width: max-content;

  &:hover {
    cursor: pointer;
  }

  // the hidden checkbox defined by the input tag
  .admin-editor-checkbox {
    // these attributes are from a tutorial. While understandable, 
    //  it's the kind of thing that might now be 
    border: 0;
    clip: rect(0,0,0,0);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  // the styled div that represents the state of the hidden checkbox
  .admin-editor-styled-checkbox {
    // ugly temp
    align-items: center;
    background: $grey-dark-lighter;
    border: 2px solid transparent;
    border-radius: $common-border-radius;
    display: inline-flex;
    height: 22px;
    justify-content: center;
    margin-right: .75em;
    transition: all 150ms;
    width: 22px;

    svg {
      color: $grey-dark-lighter;
      font-size: 1.2em;
      transition: all 150ms;
    }
  }

  // the checked state of the styled checkbox
  .admin-editor-checkbox:checked + .admin-editor-styled-checkbox {
    // ugly temp
    background: blue;
  }
}

.data-length {
  // background-color: $grey-dark-lighter;
  // border-radius: $common-border-radius;
  font-weight: bold;
  // padding: .5em 1em;
  text-align: right;
}

div.admin-loading-animation {
  align-items: center;
  color: $grey-light-dark;
  display: flex;
  font-size: 16em;
  justify-content: center;
  min-height: 80vh;
  opacity: .25;
  transform: color 500ms;
  width: 100%;

  &.page {
    color: $red;
  }

  &.post {
    color: $green;
  }

  &.project {
    color: $blue;
  }
}


// ======================
//    RESPONSIVE STUFF
// ======================


// phones
@media only screen {
  div#page-wrapper {
    flex-direction: column;
  }

  header {
    // width: 100%;
    width: $content-wrapper-phone-width;
    
    // strange, why did I make this one a class?
    div.header-wrapper {
      flex-direction: row;
      width: 100%;

      img {
        width: 64px;
      }
    }
  }

  div#content-wrapper{
    width: $content-wrapper-phone-width;
  }

  header, div#content-wrapper {
    padding-left: 1em;
  }
}


// tablets - is this a good approach with the max-bounded media query?
@media only screen and (min-width: 43em) and (max-width: 62em) {
  header {
    align-self: center;
    position: static;

    div.header-wrapper {
      align-items: center;
      flex-direction: column;
      width: 100%;

      h1 {
        font-size: 2.0em;
        line-height: 1em;
        margin-top: 0;
        padding-bottom: 0
      }

      // TODO: I don't think this does what I want it to do
      br {
        display: none;

        &::before {
          content: " ";
        }
      }
      
      img {
        width: 128px;
      }

      ul {
        width: 100%;
      }
    }
  }

  div#content-wrapper, header{
    width: $content-wrapper-tablet-width;
  }

  div#page-wrapper {
    align-items: center;
  }

  .page-enter, .page-appear, .page-exit {
    width: $content-wrapper-tablet-width;
  }
}

// smaller screens
@media only screen and (min-width: 62em) {
  header {
    font-size: 1.4em;
    max-width: 15em;
    width: $header-large-width;
    
    h1 {
      line-height: 1.0em;
      margin: 0;
      text-align: center;
    }

    nav.main-nav ul {
      line-height: 1em;
      width: inherit;

      li {
        display: block;

        a {
          &:hover, &.active {
            padding-left: 1.5em;
          }
        }
      }
    }

    div.header-wrapper {
      flex-direction: column;
      height: 80vh;

      img {
        width: 160px;
      }
    }
  }

  div#page-wrapper {
    align-items: baseline;
    flex-direction: row;
    justify-content: space-around;
  }

  div#content-wrapper {
    min-height: 80vh;
    padding: 2em 2em 2em 4em;
    width: $content-wrapper-small-width;
  }

  .page-enter, .page-appear, .page-exit {
    width: $content-wrapper-small-width;
  }

  footer { 
    display: none;
  }
}

// larger screens
@media only screen and (min-width: 82em) {
  div#page-wrapper {
    justify-content: center;
  }

  div#content-wrapper {
    width: $content-wrapper-large-width;
  }

  .page-enter, .page-appear, .page-exit {
    width: $content-wrapper-large-width;
  }
}